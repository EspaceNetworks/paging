#!/usr/bin/php -q
<?php
//include freepbx configuration 
$restrict_mods = true;
if (!@include_once(getenv('FREEPBX_CONF') ? getenv('FREEPBX_CONF') : '/etc/freepbx.conf')) {
    include_once('/etc/asterisk/freepbx.conf');
}
list($agi, $vars) = __agi();

$get = array(
		'AMPUSER',
		'PAGE_CONF',
		'PAGE_CONF_OPTS',
		'PAGE_MEMBERS',
		'STREAM'
);

foreach ($get as $g) {
	$vars[$g] = agi_get_var($g);
}

$vars['PAGE_MEMBERS'] = unserialize(base64_decode($vars['PAGE_MEMBERS']));
$vars['STREAM'] = $vars['STREAM'] ? $vars['STREAM'] : 'beep';

dbug('vars', $vars);

/* TODO: run through the list here first and check for:
 *       extension -- current device doing the page and yank them out if so
 *       if not force page -- check if target extension (or is it device) is busy if so pull out of list
 *       future - check if each specific extension needs modifications to auto-answer channel variables
 *                so the conditional assignments can be skipped
 *
 *       extension will have to be changed to the raw extension and more intelligence added to here to
 *       properly accomodated the above, and then changes to the auto-answer macro, etc.
 */

foreach ($vars['PAGE_MEMBERS'] as $ext) {	
	/*if (strstr($ext, $vars['AMPUSER'] . '@ext-paging')) {
		continue;
	}*/
	$astman->Originate(array(
							'Channel'		=> $ext,
							'CallerID'		=> $vars['calleridname'] . ' <' . $vars['callerid'] . '>',
							'Async'			=> 'true',
							'Variable'			=> 'AMPUSER=' . $vars['AMPUSER'],
							'Application'	=> ($amp_conf['ASTCONFAPP'] == 'app_confbridge' 
												? 'ConfBridge' : 'MeetMe'),
							'Data'			=> $vars['PAGE_CONF'] . ',' . $vars['PAGE_CONF_OPTS'] . ',,'
							));
}

$beep = array(
		'Channel'		=> 'Local/s@app-page-stream',
		'CallerID'		=> 'Playback Stream',
		'Async'			=> 'true',
		'Variable'		=> array(
							'PAGE_CONF=' . $vars['PAGE_CONF'],
							'PAGE_CONF_OPTS=xq',
							),
		'Application'	=> 'Playback',
		'Data'			=> $vars['STREAM']
);
dbug($beep);
$astman->Originate($beep);

function __agi(){
	require_once('phpagi.php');
	$agi=new AGI();
	foreach($agi->request as $key => $value){//strip agi_ prefix from keys
		if(substr($key,0,4)=='agi_'){
			$opts[substr($key,4)]=$value;
		}
	}

	foreach($opts as $key => $value){//get passed in vars
		if(substr($key,0,4)=='arg_'){
			$expld=explode('=',$value);
			$opts[$expld[0]]=$expld[1];
			unset($opts[$key]);
		}
	}
	
	array_shift($_SERVER['argv']);
	foreach($_SERVER['argv'] as $arg){
		$arg=explode('=',$arg);
		//remove leading '--'
		if(substr($arg['0'],0,2) == '--'){$arg['0']=substr($arg['0'],2);}
		$opts[$arg['0']]=isset($arg['1'])?$arg['1']:null;
	}

	return array($agi, $opts);
}

function agi_get_var($value) {
	global $agi;
	$r = $agi->get_variable($value);
	
	if ($r['result'] == 1) {
		$result = $r['data'];
		return $result;
	}
	return '';
}
?>
